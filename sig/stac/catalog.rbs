module STAC
  class Catalog < STACObject
    def self.from_hash: (Hash[String | Symbol, untyped] hash) -> Catalog

    attr_accessor id: String
    attr_accessor description: String
    attr_accessor title: String?
    
    def initialize: (
      id: String, description: String, ?links: Array[Hash[String, String]], ?title: String?, ?stac_extensions: Array[String], **untyped
    ) -> void

    def children: -> Enumerator::Lazy[Catalog, void]
    def all_children: -> Enumerator::Lazy[Catalog, void]
    def collections: -> Enumerator::Lazy[Collection, void]
    def all_collections: -> Enumerator::Lazy[Collection, void]
    def find_child: (String id, ?recursive: bool) -> Catalog?
    def items: -> Enumerator::Lazy[Item, void]
    def all_items: -> Enumerator::Lazy[Item, void]
    def find_item: (String id, ?recursive: bool) -> Item?
    def add_child: (Catalog catalog, ?href: String, ?title: String?) -> self
    def add_item: (Item item, ?href: String, ?title: String?) -> self
    def export: (?String? dest_dir, ?writer: _Writer) -> void

    private

    def child_links: -> Array[Link]
    def item_links: -> Array[Link]
  end
end
