# See the writing guide of rbs: https://github.com/ruby/rbs#guides
module STAC
  VERSION: String
  SPEC_VERSION: String

  class Error < StandardError
  end
  class TypeError < Error
  end

  class Catalog
    def self.from_file: (String path) -> Catalog
    def self.from_hash: (Hash[String, untyped] hash) -> Catalog
    
    attr_accessor id (): String
    attr_accessor description (): String
    attr_accessor links (): Array[Link]
    attr_accessor title (): String?
    attr_accessor stac_extensions (): Array[String]?
    attr_accessor extra (): Hash[String, untyped]
    
    def initialize: (
      id: String, description: String, links: Array[Link], ?title: String?, ?stac_extensions: Array[String]?, **untyped
    ) -> void
    
    def to_h: -> Hash[String, untyped]
    def to_json: -> String
  end

  class Link
    def self.from_hash: (Hash[String, untyped]) -> Link
    
    attr_accessor rel (): String
    attr_accessor href (): String
    attr_accessor type (): String?
    attr_accessor title (): String?
    attr_accessor extra (): Hash[String, untyped]
    
    def initialize: (rel: String, href: String, ?type: String?, ?title: String?, **untyped) -> void
    
    def to_h: -> Hash[String, untyped]
  end

  class Collection < Catalog
    def self.from_hash: (Hash[String, untyped] hash) -> Collection
    
    attr_accessor license (): String
    attr_accessor extent (): Extent
    attr_accessor keywords (): Array[String]?
    attr_accessor providers (): Array[Provider]?
    attr_accessor summaries (): Hash[String, untyped]?
    attr_accessor assets (): Hash[String, Asset]?
    
    def initialize: (
      id: String, description: String, links: Array[Link], license: String, extent: Extent, ?title: String?,
      ?keywords: Array[String]?, ?providers: Array[Provider]?, ?summaries: Hash[String, untyped]?,
      ?assets: Hash[String, Asset]?, ?stac_extensions: Array[String]?, **untyped
    ) -> void
    
    def to_h: -> Hash[String, untyped]
  end

  class Asset
    def self.from_hash: (Hash[String, untyped] hash) -> Asset
    
    attr_accessor href (): String
    attr_accessor title (): String?
    attr_accessor description (): String?
    attr_accessor type (): String?
    attr_accessor roles (): Array[String]?
    attr_accessor extra (): Hash[String, untyped]
    
    def initialize: (
      href: String, ?title: String, ?description: String, ?type: String?, ?roles: Array[String]?, **untyped
    ) -> void
    
    def to_h: -> Hash[String, untyped]
  end

  class Extent
    class Spatial
      def self.from_hash: (Hash[String, untyped] hash) -> Spatial
                        
      attr_accessor bbox (): Array[Array[Numeric]]
      attr_accessor extra (): Hash[String, untyped]
      
      def initialize: (bbox: Array[Array[Numeric]], **untyped) -> void
      
      def to_h: -> Hash[String, untyped]
    end

    class Temporal
      def self.from_hash: (Hash[String, untyped] hash) -> Temporal
      
      attr_accessor interval (): Array[Array[String?]]
      attr_accessor extra (): Hash[String, untyped]
      
      def initialize: (interval: Array[Array[String?]], **untyped) -> void
      
      def to_h: -> Hash[String, untyped]
    end
    
    def self.from_hash: (Hash[String, untyped] hash) -> Extent
                      
    attr_accessor spatial (): Spatial
    attr_accessor temporal (): Temporal
    attr_accessor extra (): Hash[String, untyped]
    
    def initialize: (spatial: Spatial, temporal: Temporal, **untyped) -> void
    
    def to_h: -> Hash[String, untyped]
  end

  class Provider
    def self.from_hash: (Hash[String, untyped] hash) -> Provider
    
    attr_accessor name (): String
    attr_accessor description (): String?
    attr_accessor roles (): Array[String]?
    attr_accessor url (): String?
    attr_accessor extra (): Hash[String, untyped]
    
    def initialize: (name: String, ?description: String?, ?roles: Array[String]?, ?url: String?, **untyped) -> void
    
    def to_h: -> Hash[String, untyped]
  end
end
